Ben: Hello Acquired listeners, and welcome to another great episode of ACQ2. Today we have Guillermo Rauch, the founder? Co-founder and CEO? Guillermo, what’s the right terminology here?

Guillermo: All of the above.

David: Everything. The man behind Vercel.

Ben: Aside from all the big fancy numbers valued over $3 billion, amazing customer list, and blah-blah-blah, we wanted to turn the question to you and say, how do you describe Vercel?

Guillermo: Vercel is the infrastructure platform to build and deploy modern web applications. Something that’s personal that is infused into the company is I’m obsessed with developer experience, with performance, and with design.

The platform is a way of deploying the best possible web applications with ease. For the average visitor of the Internet, what it means is that every time you go to a link, if it’s fast, if it’s delightful, it’s likely to be built on Vercel.

David: Amazing.

Ben: That’s quite the flex.

Guillermo: Yes, but I’ll give you an example. Think back to November 2024, US election, and you’re checking out new sites. You’re refreshing, you want to know the latest and greatest, you need real time data. Whether you’re going to Washington Post, whether you’re going to (I don’t know) Minnesota Star Tribune, or the innovators of the space like Polymarket, Perplexity, all of those are built on Vercel

Increasingly, whether it’s a startup or an established enterprise, they’re leveraging Vercel to build innovative products. Or later in the month like Black Friday, e-commerce, you need to scale, you need to serve tons of traffic, you need to have really good experiences. So household names like Bose, Fanatics, Supreme. In the up and commerce, the new brands like Axel Arigato or Ruggable. Those companies are all building on Vercel and hopefully delivering products that people love.

Ben: All right, so it sounds today very successful, widely deployed, everyone’s accepted this amazing product and platform that we should use. It was not always that way. Take us all the way back to 2015, or even before, and how did this start.

Guillermo: It’s kind of crazy to go back in time, the company’s grown so much now, but the original idea was simple. There were a million ways to build a website or a web application. There still are a million ways to build a website or web application, but none of them that met the quality bar of the giants of the web. It was almost like Vercel was that democratization effort.

If you think about companies like Meta or Google or Amazon, they build really fast, they try lots of things, they experiment a lot, their experiences are highly dynamic and tailored to every visitor.

But the web at the time was actually super static. It was really difficult for customers to stay online. The cloud was coming up, but the cloud was exceedingly difficult to use. It felt like you needed a PhD.

This was my personal experience because when I started this company, I didn’t set out to build exactly what you see now. I started trying to build a website, and I reached for the latest and greatest. Again, my aspirations were super bold, super ambitious. It has to be Google or Amazon quality.

Ben: And what is the latest and greatest at this point in 2014–2015 that you’re thinking, oh this might solve my problem.

Guillermo: Google had just open-sourced Kubernetes, an incredibly sophisticated way of deploying infrastructure and managing it. And Meta had open-sourced React, which is a UI library, it’s the engine that powers user interfaces.

David: The narrative at this time is like, oh the web is fast. There’s React, there’s Kubernetes. All this stuff is open source. It’s out there.

Guillermo: Exactly. But think about the average developer or the company that’s going through digital transformation. What tools did they grab for? If they grabbed those tools they would have to spend months, quarters, configuring them, assembling them into their own platforms.

But Vercel was born to basically automate all of that. We wanted to bridge that gap between the availability of open source technology, and you creating delightful experiences that you could publish really fast.

One distinction also was that we started out very general. You could deploy anything on Vercel. But where I personally found this true DNA of my own personal journey was focusing on front-end development.

For many, many years, ever since I was 12 or 13 years old, I became obsessed with refining the side of applications that are customer-facing. I built a platform that focused a lot on that. I built the infra, it delivers your applications globally, really fast, really well-optimized, but also this framework Next.js, which now has 1.3 million monthly active developers.

Next.js is all about giving you the tools and the perfect guardrails to build those awesome front-end experiences. And it builds on React, so it’s the standard now for how a lot of developers build the fastest web applications.

In fact, to give you some context, anytime you use any modern AI tool, whether it’s ChatGPT, Operator, Claude, Sora, Midjourney, all of those are built on Next.js. So it’s become the gold standard for front-end.

Ben: And did you start Next.js?

Guillermo: Yes.

Ben: You wrote the first line of code, it was an open source thing.

Guillermo: Absolutely. I had a personal frustration to be honest. Again, think of it this way. The ways of the future had already been discovered. The papers had been published, the open sourcing had happened thanks to Google, Meta, and many other companies. But to actually put that into practice, it felt like you needed a PhD.

Sometimes, the metaphor I give people is, things like React are like the engine and people need a car to go from A to B. So Next.js and Vercel became that car or even that space shuttle to the cloud, both delighting developers but also businesses, because for the business if you use Next.js and Vercel, the website is faster, it makes you more money, it converts at higher rate.

I guess looking back, what made Verel unique is that we did both. It’s the vertical integration between software and hardware. We built the tools for the developers, and we built the highly optimized infrastructure in the cloud for it, and it was somewhat controversial.

The way that people would use the cloud back then was, oh, okay, I’ll choose AWS or I’ll choose Google Cloud, and Vercel builds on top of AWS. It was basically like Choose Your Own Adventure for how to build the app. It’s silly that you would tell companies, well go shopping on GitHub for some open source framework and spend months binding it to your infra.

David: That’s so funny. I remember back in those days there were companies like, oh, we’re going to host Kubernetes for you. We funded one when I was at Madrona and it was actually a great outcome. Great, I’m going to host Kubernetes for, what are you going to do? You’re an e-commerce company. Thanks, I’ve got Kubernetes. That doesn’t help me, you know?

Ben: Well, Kubernetes engineers were fetching $500,000–$1 million salaries because they were so rare and so valuable, and all these companies were like, well apparently we got to figure out Kubernetes.

Guillermo: One way to think about it is Vercel hired them all so you don’t have to. If you’re building a cool web application or if you’re facing strong competition, you have to modernize really quickly. You have to adopt AI features, you have to build new interfaces, you want to cut to the chase. You don’t want to be managing clusters, you don’t want to be writing your own frameworks.

In fact, some of the companies that I mentioned, it was so interesting, they were developing their own Next.js’s. We developed the last framework so companies would not have to do their own adventure. In fact, the joke I would make at the time was by standardizing on Next.js, now you have access to all the Stack Overflow questions and answers that every other developer has run into.

For the enterprise, it made a lot of sense. Standardize on tooling, you can recruit talent that is up to speed with the tool, and it’s all open source. Now it’s even more so because the LLMs are experts in Next.js and React. You joined this global zeitgeist of knowledge and wisdom.

Ben: I’m obsessed with this idea of, why did the opportunity for any given company exist, and hopefully this isn’t too political of a question in the web development world, but why is it that the opportunity for Next.js was there? Did react miss the mark in creating the right level of abstraction? Did they create something way too powerful, way too configurable, way too heavy, and it required someone else to come along and build the actually usable interface for the masses?

Guillermo: There are a couple of things that happened. One was that the community took this weird detour towards the static applications, which always befuddled me.

I’m not saying I’m some genius that saw the future, but I was so puzzled because when I grew up, one thing I loved doing was to reverse engineer how the greatest things on the Internet were built. I remember when Gmail first came out, I just nerded out for months trying to understand how it works. I mentioned that Vercel exists to give you the soup.

Ben: Oh yeah. Didn’t you build a web sockets library prior to Vercel?

Guillermo: Yes, Socket.IO. I became obsessed with real time communication. I became obsessed with democratizing how these greatest applications worked.

If you know how Google works, if you know how facebook.com Newsfeed works—and they’re highly dynamic, that’s how they attract and retain users—why were people building static frameworks to React?

It puzzled me because investors were chasing a lot of those frameworks. I was like, why are you funding that? I quietly kept building this Next.js thing that was focused on dynamic. It was focused on rendering in the cloud as opposed to on the device.

I also knew very firmly that if you rendered in the cloud, you were taking the burden of experiencing a website off of the device. Mobile keeps getting bigger and bigger and bigger, and you just want to give people the thing that they want on mobile as fast as possible. I wanted to offload all that rendering and compute to the cloud.

That’s the first alpha opportunity that I found. Everybody else is focusing on static and the very, very fat client approach. I focus more on cloud and I focus more on dynamic, which is by the way way harder for me. Scaling up the infrastructure and making it secure, making it multi-tenant, doing all of that took years to perfect, so it was a very long bet.

To your point, React was also very low-level and that also helped us. I remember talking to a lot of really large sites at the time. I think it was Redfin. They were creating really cool abstractions on top of React for their needs. So there was also that opportunity to bridge the gap and give you the complete tool set to actually be productive.

Ben: It’s interesting. Should React have had a Next.js-like layer built-in from the start?

Guillermo: Absolutely. Facebook actually had it. It was just how they actually used the tool. This is something that happens in open source, and it happens a lot with papers. The company will and to their credit doing a great service to humanity, they’ll give you some details, and then others that are super important ingredients are left out, not intentionally.

If you think about how Facebook actually used React, they had their own Next.js internally. It’s a lot of work to actually maintain massive open source projects like this, so yeah, I think ultimately the market spoke. What they wanted was dynamic over static, and a complete end-to-end framework with server-side rendering over just the low-level component.

Ben: Did you conceive of these two things at the same time—the library of Next.js—and then the very complex infrastructure for hosting it that would become Vercel?

Guillermo: I started with the infra because I was obsessed with the idea that all a developer should do is push code, receive web application. Anything that sits in-between in the form of configuration, creating clusters, filing tickets with IT was nonsense. It was pure alpha for me to grab. So first came the infra.

The mistake that I made initially was that it was too general. I was trying to deploy everything under the sun. When I actually made it true to my story of, focus on the front-end, Guillermo, that’s where you know your expertise lies.

In some way, you can credit a meme to the genesis of this story. There was this meme going around that using front-end was like solving this massive blackboard of math equations. The front-end ecosystem loves to be very self-deprecating, so they make a lot of jokes about their own job.

If you paid attention to the memes, you would arrive at Next.js because it was so difficult to actually get started building these projects. That’s when the idea later arrived to like, hey I can create a front-end framework and it’s going to play really, really well with this infrastructure.

Ben: To concretize this idea for listeners of the show of just getting some of the crap out of the way where you write code, you deploy it, you receive application back, I asked a developer friend in prep for this episode what was the first magical experience you had with Vercel.

He said he specifically remembered the moment where he realized all of his Git branches were automatically deployed as previews and he could just go and in real time play with the code he had just written, even though he didn’t actually spin up a whole environment and deploy it. Could you tell me about the origin of that feature and did you conceive that to be as needle-moving as he experienced it as a user?

Guillermo: I didn’t realize that it was going to be so powerful to give people URLs even before they hit production. What I knew for a fact is that obsession of, I told you, keystroke to live application. Even down to a mathematical measurement, like how many milliseconds should it take? And I was going to bring it down from weeks, which I had experienced in my previous job, and conversations with humans, to a developer pressing enter on a terminal or running git push. That was my obsession.

What I underestimated, and it’s been a wonderful gift for our business, is that companies value even more the ability for their developers to collaborate with other personas in the organization. When that Git branch gets automatically deployed and you have that URL, now everybody in the company can participate in building software.

Ben: Oh, it ends that horrible thing that I remember going through when I worked as a developer where you’re like, yeah, I can only show you on my machine and actually my machine is doing something weird right now. Let me come over to your desk in an hour holding my laptop, hovering over your desk so you can see what I’m talking about.

Guillermo: There are a lot of silly things that still happen, like developers fighting one staging machine. There’s a huge security risk, by the way, to dev and test environments in the cloud that they’re computers that are just there with developers running tests in them. Whereas Vercel’s preview environments—this is what we call these URLs—are completely ephemeral and secure.

So you have all these horror stories of developers having to wait for hours in order to show somebody. Sometimes, the developer shows their client as a freelancer. Sometimes, it’s companies cooperating internally, collaborating internally.

The other one that’s crazy is I had a conversation last week with a CIO of one of the largest banks in the world, and they don’t have this technology. Instead, what they do is they set up meetings. They say, okay next week let’s coordinate the calendar of 12 people, and someone will screen share their machine to show the feature they’re working on.

It’s nuts. They don’t even get to test it on the real thing that they should be testing on. You can take this URL, I can put it on my phone, and now I can experience what the end-user will experience, which is most people on the Internet are on their phones. Most developers are on their desktop. It’s silly.

One of our largest ecom customers was telling me, 90% of my traffic is mobile. Thank God for those URLs, I can load up the site before it goes out on that phone and have the developers face reality.

Developers are the most coddled people on the planet sometimes, besides the corporate lunches and whatnot. We have these massive mega computers—the M4, M5, Power (super) Mac—and then, okay, are you actually relating to that end-user that’s going to visit your campaign, your application, your internal tool most likely in a mobile device? And Vercel is basically solving that problem as well.

Ben: That’s great. Okay, so we’ve been living in this early Vercel company history land. There’s always a few magic moments in a company’s history as we move through the progression to today where you really went from feeling like, I don’t know if this is going to work, to oh my God, people love it, and I now believe this is going to work. What were some of those along the way for you?

Guillermo: I think the most prescient one that blows my mind still to this day is the launch of v0, which is our AI assistant for web development.

Ben: It’s crazy, you’re giving me an example, nine years into the company’s history.

David: Yeah, when did this happen?

Guillermo: v0 is truly like a startup within a startup. The way that it happened is these large language models became really good at coding. They became really good at our tools as I mentioned. They’ve been trained on our tools, they’ve been trained on Next.js. React is truly a blessing. But we saw an opportunity to disrupt how web applications are built.

v0 transforms prompts, so English descriptions into working applications and user interfaces. It’s a true disruption in that it’s not code first. It’s code last. Anybody with an idea can cook. You come to v0, you type in what you want, it’s time to cook.

To give you context on this, we launched it as a research preview in September 2023. We’re very early because we’re so excited about what language models were able to do with code. It took us 10 months to get to $1 million in ARR, then 14 days to get to $2 million, and then 20 more days to get to $4 million.

That pace continues and the trajectory is just something that I’ve never seen in my life before. I’ve been involved with successes like Next.js and whatnot. This is to the point where we are that company that is making the hyperscalers run out of GPU capacity in their world’s largest regions. So it’s been fascinating to be a part of this.

Ben: Okay, so how does it work? Why are you running out of GPU capacity?

Guillermo: Think of it this way. To create a Next.js application, we just made it as easy as possible for developers. But it still takes several steps, setting up tools, whatever. Now you just open a website, you go to v0.dev, you type in a prompt, and all of that process that before was reserved to a couple of million developers that exists on the planet, now the top of final is hundreds of millions of billions of people. Anybody can create software with this.

The kicker is this, and this is what was my ‘hmm’ moment with this tool, by the way, I’ve been doing front-end since I’m almost in diapers. I’ve been in the arena for a while. It can create code better than what I can do by hand.

One of the ‘hmm’ moments was I recreated my own personal blog, which of course I wrote with Next.js, and the output of what v0 created was better. It was better in a responsive way, it was better in both desktop and mobile, and it had better accessibility capabilities.

I had forgotten to set up some configurations, some tags, and some code that came naturally to v0. v0 knows everything and remembers everything. The rate of application creation is something that has maybe quadrupled for Vercel.

Signups are through the roof. It’s also because this top of the funnel is people that before couldn’t make sense of Vercel. Vercel is the infrastructure at the end of the day. It’s really great for developers. This is great for everybody.

Ben: So funny. Vercel, you have a corporate journey ahead of you of going from a developer brand to almost a consumer brand.

Guillermo: I think developers will become this more common skill, if you will, development itself. Think of it as anything that was done by humans that then machines took over. Like translation.

Google Translate is a really good example for me because first of all, Google Translate has originated transformer architecture as an interesting side effect. But taking something in a language like Argentinian Spanish and converting it into English no longer requires human specialization.

A lot of software processes, software development processes are like that. They’re translating intent into working code. My take is that development will go from being a role like translator was a role, to a skill that AIs will increasingly dominate. AIs are awesome at summarization translation, and they’re awesome at writing code.

Now what’s really cool, too, is that the taste of the human being, the direction that the human being sets, and the creativity of the problems that they want easier to solve, are still intact. Those are extremely valuable.

The other thing we’re seeing at Vercel is that we’ve inspired other companies to pursue and create their own v0s. Literally just a couple of days ago, I heard about the v0 for CAD. It’s going viral on social right now.

David: Computer Automated Design?

Guillermo: Correct, for architects and for 3D printing and whatnot. That company’s using Vercel because we’ve open-sourced the secret sauce of how we built v0. v0 has been this double interesting disruption.

On one level, it’s making Vercel so approachable to everybody. On the other hand, because its infrastructure components are open source, it’s inspiring other companies and startups to go after the disruption of other industries.

David: You tweeted the other day about e0—email zero—I saw that [...]. Oh hell yeah.

Guillermo: v0 for email, v0 for cad, v0 for medicine. In fact, there’s a v0 for medicine called OpenEvidence that is built with Next.js and Vercel. There’s this open source framework that we created called AI SDK. Think of it as the tools to build your own v0s. It massively benefits Vercel if the world gravitates towards this expert AI.

By the way, this is not just business’ strategy of sorts. I remember when Jensen said most companies will refactor themselves into token factories. You have some expertise, you have some taste, you have some opinion of the world within your organization.

For us that was web development, design engineering, so we created v0. There’s going to be e0 for email. There’s going to be finance v0. I’m really, really excited about what’s happening right now. It’s not just our success, it’s the success of the community.

David: What is v0? Did you guys create your own foundational model? What is your infrastructure and what actually is the product that you’re providing?

Guillermo: Many years ago I tried a product that failed. It’s called Next.js Live. Next.js Live was the idea of helping you run the entire development environment of Next.js inside a web browser. My aspiration was because front-end is all about what the user sees, can we actually cut out the design process? Can we design with code? It turned out not to work so well because even though we’re targeting this persona that is very visual, you still needed to learn a lot of code.

v0 is like us learning from the past or us trying Next.js Live again. It was like our Newton and this is our iPhone. Part of v0 that’s very unique is that we can run the rendering environment, we can run the foundations of Next.js and Vercel inside the web browser, and we combine that with state-of-the-art foundation models that we steer towards becoming experts in web development.

I mentioned how v0 is an expert in web accessibility. People tell us v0 has good taste. The design that it outputs looks better than the average thing that sometimes people go slop. Instead of outputting slop, we created all these guardrails in the form of evals, benchmarks, prompts, and rag. We are even creating custom design systems that are tailored for AI.

By the way, this speaks to the disruptions going to happen even in the framework space. Rouch G, myself from 10 years ago, maybe it wouldn’t be so successful today because I was creating frameworks for humans. What we’re doing now is starting to create frameworks for AIs, design systems for AIs.

Ben: Just to make sure I understand, through these rules, evals, prompts, and trying to remember everything else you said, rag, are you imbuing Vercel employees’ taste into it to make sure that the output always adheres to the taste level of your company?

Guillermo: When I created Next.js and it became so successful, literally every company on the planet was begging me for support. Support and training, support and training, support and training. I was like, guys, I’m creating infrastructure over here. I want to scale myself. I don’t want to go and teach everybody one-by-one how to hold this thing.

That dream remained elusive for many years. The idea that I could go myself to every company, and you’ve probably seen that I still go to a lot of conferences, I meet with a lot of developers, I meet with enterprises, but it just doesn’t scale. I want to send my best engineers to these companies.

We employ the tech lead of React, we employ the Next.js team, this Velt team, all these open source projects, and these people have pretty full inboxes as you could imagine. They support tens of millions of developers.

So you’re exactly right. We are imbuing the preference data, the demonstration data of what they think is the best way to build software. It’s our answer to how you actually make, support, advice, audits, migrations at scale, sustainable and efficient. A lot of you are using v0 because it’s really good as an emergent property to migrate from legacy frameworks to a Next.js in modern technology.

Ben: Which I imagine had to be a sales hurdle for you for a long time. They really want to, but gosh, they just can’t find this dev schedule time to actually rebuild the whole thing on Vercel.

Guillermo: Another ‘hmm’ moment, and I literally made a fellow industry practitioner’s jaw drop the other day, is that you can get on a call with a prospect and you can build the web application of their dreams in that call. It’s just nuts.

We take a screenshot of their current website built on legacy technology, we throw it into v0, and out comes the high performance version that otherwise would’ve been a sales pitch. It would’ve been a trust me bro. We can do this together. We can bring in an agency. Literally it’s happening within calls.

Sales cycles for Vercel are shortening, customer delight and trust is going up. They share this link. The way that people work is changing. A lot of our customers are now sending these v0 links.

The Groundhog Day of myself is like, how can I make people collaborate with links instead of words or documents or whatever. So these v0 links are how the conversations are happening. Oh, can you change this? Can you change that? Okay, here’s the new v0 for this.

For the sales team, solutions engineering team, those people feel so empowered. They feel like they can actually cook, as opposed to waiting until arrangements are made and contracts are signed. We get to software much, much faster.

Ben: It’s such an interesting fork in the universe of your company, because what if LLMs hadn’t happened at the moment that they happened? You guys would still be a successful company, but your time would be spent differently. The company would be moving in a different direction right now. This opened up this whole different world for you.

Guillermo: I think if LLMs hadn’t happened, I almost felt like we were going to hit diminishing returns on all those developer experience ideas that we had. When you think about developer experience, to make it very crisp to listeners, developers need very fast feedback loops. If not, they’re the most [...] people on the planet. They get distracted, they get out of the zone, they lose that mythical flow zone that they love.

And so Next.js and Vercel obsessed with like, okay, what are the classical software engineering techniques that we can use to optimize those processes? For example, we partnered deeply with AWS’s serverless infrastructure team.

For those deployments previous, instead of creating massive amounts of redundant infrastructure and clusters that cost millions of dollars, we create serverless functions under the hood. It’s a very specialized infrastructure innovation.

But at some point, we’re going to hit the limits literally of the speed of light. That’s how fast we’re going to give developers feedback. We’re still far away from that, by the way. Hitting those limits is like we saw that supersonic plane yesterday. It’s hard engineering to get to the limits of physical reality.

I saw the writing on the wall, and I was very excited about it, by the way, because it was like I talked to a cutting edge database company the other day. The feedback loops for their developers today are 60 minutes. They’re doing a Vercel POC, it cuts them down to two.

To make something that fast for some of the highest leverage individuals on the planet, best paid individuals on the planet, is incredible returns for the organization. But the writing was on the wall that we can bring it down to two, we can bring it down to two seconds. Then at that point, the limiting factor becomes how many humans on the planet can do this job?

This is what v0 is revolutionizing. We can bring so many more people into the world of building software, and now they can piggyback on this infrastructure that has been battle-tested by some of the largest companies on the planet.

Ben: It’s fascinating. I’m sure we’ll come back to a lot of this v0 AI stuff. I do want to ask you some company-building topics, advice for other founders out there.

There are a lot of engineers who have a dream of creating something that is two-pronged, an open source project and a for-profit corporation. The devil is in the details, and many people fail at doing this well. What would be your advice for people on how to think about doing that well?

Guillermo: My number one priority is to be excellent at one thing. I want to be world-class at one thing. People call it dominating a niche. When I started out Vercel and then I focused on making the fastest websites, the fastest front-ends, the fastest storefronts, that’s when things started working for me.

Being a jack-of-all-trades doesn’t work in this world. Both developers and the most discerning enterprises just want the best product in the category. Vercel became that for front-end, and from there we can expand outwards and provide a lot more services to developers.

We call it the transition from being a front-end cloud to being a developer cloud. Developers are asking themselves for more from Versel. I think I had it upside-down in the beginning. I thought, well I have to give them everything. Instead, it’s actually much better to establish a dance with a customer. You give them enough that they love the product, and then they should be the ones pulling product out of you.

Developers for many, many years would say, like can I get a database on Vercel? And I would say, we’re not ready yet. We’re not ready yet. Can I do more back-end on Vercel? We’re not ready yet. We’re not ready yet. And now we’re ready.

Ben: Because you viewed yourself as very tightly coupled to Next.js for the first 6–7 years of the company, right?

Guillermo: Exactly. We focus a lot on Next.js and front-end frameworks that have the same shape, if you will. There are others. For example, we support Svelte that powers companies like Logitech on Vercel. It powers companies like IKEA. There are others. It’s not just Next.js, but these were all front-end–focused frameworks.

What’s happening now is people are saying, well I want to build more. I want to build more of the back-end for my checkout process. I want to build the entire back-end for my SaaS application. I want to build a back-end for how I process the tokens coming out of the AI models.

Now Vercel is giving them that. We started out focused and then expanded from there. That I think is something a lot of entrepreneurs miss, which is they feel the initial presentation of their product has to match one-to-one the size of their ambition.

Our ambition was to disrupt all applications, even not just web and beyond, so anything that runs on a phone, for example. But if we didn’t start with something that was world-class and small in the beginning, I think we wouldn’t be here today.

Ben: And to maybe ask the question a different way, there’s a great business model around Vercel and there’s zero revenue generation around the open source project of Next.js. Did you ever think about doing it differently?

Guillermo: Never. Absolutely not. Open source for me has always been my life. When I was in Argentina, open source was my ticket out of Argentina and into the world. I always wanted to build the best possible technology. I couldn’t fathom as a developer today, if I’m starting an application, imagine if the framework was proprietary. It just doesn’t make sense.

We’re doing it again, by the way. I mentioned the AI SDK. We saw an opportunity to democratize building applications like ChatGPT. We knew that there wasn’t going to be just one AI rule at all. The web is all about decentralization. It’s about you have your own domain name, literally your own domain where you set the rules. Vercel is so aligned with making the web better, making it reach more places, more surfaces.

The deployment model of the web is that you don’t have to ask permission. You don’t have to ask for a license from anybody. Web is where disruption happens too, so ChatGPT was a website built with Next.js. It was a research preview that someone put out into the world. So I’m very excited to continue to do this.

AI SDK, to give you a context, went from 100,000 downloads a week to now almost a million downloads a week. In about a year, it is the second most popular way of getting AI into a JavaScript or front-end application after OpenAI, the second largest AI module.

There’s actually no direct business model for it. We want developer adoption. We want their feedback on their community. We want to get our brand out. We want to learn. We want to learn from as many people as possible.

Then when they decide to build and deploy their application, they’ll probably choose Vercel, because they know that we have sweated the details of the parts of infrastructure that they don’t care about.

Some people do. On some level, there is an IKEA effect too of like, I enjoy the process of learning. A metaphor that I view sometimes is that you have to do it at least once, so that you learn what it’s like to create this infrastructure. It’s like going to school.

But if you think about the successful companies out there that share the same business model as Vercel, like Snowflake, like Databricks, like Datadog, the value they give to the world is that you’ve given them the heavy lifting of infrastructure, and you pay for what you use.

If an application on Vercel is small, then you don’t pay a lot. If an application takes over the world, you pay more. It’s a very fair deal to developers and they understand exactly what they’re paying for.

Ben: Okay, so one more question along this line. I’m a founder, I’m considering something with this business model. Would you caution me against taking it all the way to the logical extreme where I say every single thing I do is open source, and I’m the best in the world at creating the infrastructure and the hosting and the deployment, so I can just trust that I open source everything that I do and I’m not giving away too much of the golden goof.

Guillermo: The bottom line is that part that I just mentioned. Most companies in the world want to offload the infrastructure burden to Vercel. Having that piece be open source so that we teach you how to set up 20 global regions of infrastructure with hundreds of microservices each, open source actually hits diminishing returns there.

It gets so mind bogglingly complex. Most of the software engineering that goes into that, by the way, is operational rather than based on the source code. It’s the monitoring, it’s the upgrades, it’s the rolling systems, the staging techniques. Actually, I would argue that’s not where open source even shines for that matter. Open source shines when it gives you a programming model.

Next.js defines and declares the application. The way we think about this at Vercel which is actually quite disruptive is infrastructure has to be an output of the application. Most companies that reach for the cloud started with the infra.

We’re inverting that. We tell you here’s the Next.js framework. Focus on the application. You’re going to be multi-cloud. You’re going to have the ability to self-host it yourself. Or we’ve also taken that burden. Here’s Vercel as an option. Vercel doesn’t need to be open source. I think it wouldn’t bring value to that audience.

David: When you were creating the business model, were there any companies that had perfected this that you’re like, oh, this is the inspiration. We should just do that. Or how much of this was innovative? Because the open source business model basically used to suck. There were successful companies out there like Red Hat, the company around it is just support. You’re just selling support. It doesn’t scale.

Guillermo: Totally. There weren’t a ton of examples, to be honest. I think the closest thing is probably Databricks or GitHub. Github is a lot about collaboration, and it builds on Git as an open source component. They didn’t create it, I think it’s a big difference. but they give you these URLs to code.

There is a huge parallel there. Instead, Vercel gives you URLs to working applications. I’ll argue that code over time will become less important as it becomes the domain of AIs. GitHub is a phenomenal example of that part of the pre-production side of Vercel.

Then on the infrastructure side, companies like Databricks or Snowflake, where in the Databricks case you adopt an open source component like Spark, and then they have a highly optimized compute engine for that component in the cloud. You can totally do the DIY yourself, but scaling global clusters of compute, very difficult job.

That’s the secret sauce of Vercel for the parts of the application that deal with the run and the serving, the securing of the application, the DDoS mitigation, and making sure that it stays up during massive spikes of traffic. That’s the beauty of Vercel.

David: It is a beautiful business model. There’s actually a lot of stuff you have to do for this to be viable, for corporations to trust you to be their infrastructure. You can’t just be like, oh I’m a seed stage startup, and like, hey Supreme, come trust me with your infrastructure.

Ben: What were inflection points there? When did you feel like whoa, we got a customer, that it was hard to get them to trust us, and now they trust us?

Guillermo: I feel like when it rains it pours, because it’s now happening a lot. There are all these banks that are migrating to Vercel. I think, by the way, I’ll give credit to the crypto space.

What happens to Vercel, by the way, is whenever there’s a new wave of technology, and this has been a blessing and also sometimes a challenge, anything is new and disruptive, people tend to build it on Vercel. Why? Because they’re motivated by the speed at which they can get their ideas out.

If you’re building on crypto and you’re building on AI, most of these startups are choosing Vercel. Crypto, though, was fascinating because it attracted literally the worst, darkest actors inside of the Internet. So it really made us triple down, quadruple down, 10x on security services and products. From the careful encryption of the vaults of how people store the secrets to connect to their databases and back-ends, or wallets and all kinds of cryptographic details that these companies need, as well as the traffic.

The hardest, most difficult thing about the Internet in running infrastructure is that you have to discern between good traffic and bad traffic. We set out to do security the Vercel way. The Vercel way is that it’s zero configuration, it’s secure by default. And we needed to be secure by default because I think something that’s different between us and the CDNs, for example, for context Vercel builds in the CDN and WAF capabilities that you typically would have to go to another infrastructure provided to to get.

David: Akamai, CloudFlare, blah-blah-blah.

Guillermo: That’s right. The difference between the legacy ones, of the non-cloud ones, or the outside the cloud ones like Akamai and CloudFlare is that because they don’t host the application. They filter out all the traffic. It’s hard to say they’re even doing a good job sometimes. Whereas Vercel has to filter out 100% of the malicious traffic instantly.

Ben: Otherwise it’s your own problem.

Guillermo: Correct.

Ben: But your incentive is aligned to be a really, really good CDN.

Guillermo: Correct. Crypto really put us through the ringer. And I loved it, to be honest. I look back and so for example, Solana is really hot right now. Solana hosts all of their web properties. We’re like the Web2 phase to Web3 for a lot of these great blockchains and crypto companies. All of the large NFT companies picked Vercel. You could imagine also just the massive upswings of traffic.

There is a meme coin that goes hot. There is an NFT that goes hot. There is a new cryptocurrency that goes hot. But it bolstered our security to the point where we have industry-leading response times, for example on DDoS mitigation. We do it within seconds. Our competitors do it in minutes sometimes.

We see this because sometimes customers layer on another CDN in front of Vercel, which is not necessary, so we see the attacks coming from the CDN. We’re like, what? You were supposed to protect the customer. That was fun. Yeah, you learn a lot by being exposed to all of this.

Ben: I got to say, there is a delicious irony to the fact that these Fortune 500s that are signing these big multi-year enterprise contracts with you, and effectively using Vercel for their own digital transformation and changing their workplace and their culture, is benefiting from being hardened by DDoS attacks from the crypto world.

Guillermo: There’s another fascinating effect. The way that we’ve gotten into large enterprises sometimes is because they acquire—no pun intended to Acquire podcast—the disruptor. They acquire the innovator. I wouldn’t be surprised if in the next 10 years there is more of a merger between crypto and traditional finance. That’s happened a lot with AI, and Next.js has become the common language that speeds up M&A.

I also give credit to React for this. When you acquire a Next.js-powered company, your integration times go down to like, what? You copy-and-paste some files into another repository. Why? Because the infrastructure is an output of the application.

Literally, the job of integrating companies becomes integrating the two front-ends. The back-end services are pluggable. The more people stand their eyes on this tooling, there’s this greater than the sum of the parts effect that happens. We’re starting to see it in the form of M&A, where the startups get really, really, really big and intimidating to their incumbent competitors, and they get bought.

Of course there are also enterprises realizing, I need to hop on this train, this is how I get talent, this is how I retain talent, this is how I move faster. It’s been awesome to see that we have global impact, and it happens with the brands that I love. My favorite automobile company from Germany uses Vercel and it’s just delightful.

Ben: All right. Which one?

Guillermo: I think we don’t have logo rights for that one, but…

Ben: Have we covered it on Acquired or not?

Guillermo: You could probably extrapolate from Vercel’s design and taste.

David: That’s pretty awesome.

Ben: Great. We won’t push you into something uncomfortable there. One question that’s been a fun one for us to ask here on ACQ2 the last few episodes, is what is something that you believe as a leader or a founder or a technologist that you have real conviction in and you feel others don’t?

Guillermo: I think there’s an easy one for me here because I experienced it over the last couple of weeks that reaffirmed my conviction. I think CEOs, especially technical CEOs, can and should be involved in every aspect of the business.

Whether it’s closing a deal, looking at the numbers of the last quarter and tuning sales quote as a sales compensation, it’s informing future product roadmap, it’s pricing discussions, I am involved in every aspect of the business.

Ben: How many employees are you?

Guillermo: 550.

Ben: Okay.

Guillermo: Maybe also for context, Vercel is now at about, well last number we disclosed was we hit $100 million in annualized revenue, May 2024, growing 80% year over year in revenue, and developers using Vercel more than doubled over the past year. We’re operating at a significant scale.

I think the role of the CEO and the conception of the CEO is evolving and changing. Companies are becoming a lot more transparent. It’s about optimizing the information flow within the company rather than creating silos of information. We’re doing it a little bit differently here at Vercel.

Ben: How do you stay that involved with 550 employees?

Guillermo: I think using our own product has been a massive acceleration. I don’t need to get brought up to speed on things. I am in direct connection with the developer community. I talk to customers. Whenever I find time, I use v0, I use Vercel. I’m staying very grounded on the reality of the product.

There is just no time being wasted on briefing executives. The expectation is that you understand the customer deeply, you understand the product deeply. We try to hire people for every area of Vercel that have a technical background, that have used Vercel in the past if possible, so we tend to move real fast. We optimize our entire product and platform around product velocity. The way that the company behaves is the way that the product behaves.

When I’m seeing success with some of the largest, more established brands, household names, when the CIOs, CTOs, CEOs come to me, they don’t want a specific aspect of our technology. They want us to teach them how we build. They want us to export how Vercel works. They can tell that we’re moving fast. By continuing to make the company and the product a symbiote, a two-way street, I think this is how we’re saying really fast and lean.

Ben: Makes sense. An outside observer would then say, there’s got to be some trade-off here. How can you possibly hire executives that you want to empower as much as possible, but you also want to be extremely involved? How do you deal with that trade-off?

Guillermo: I think the fast exchange of feedback is huge. Of course, the executive is the one that’s on the line that is responsible for a set of numbers, KPIs, outcomes, whatever you want to call it. But I’m involved in giving them high quality feedback. That’s my number one job.

I’m the bridge to reality in many ways. I bring the customer stories from the outside world. I hold them accountable to that. I put them on the line, like you have to be able to use our product to demo our product. It’s not that I take their job, it’s that I’m able to get on the same altitude and go into the texture of what they’re supposed to do. I think it’s rooted in understanding rather than outsourcing the labor.

A principle that I use internally a lot is, as a CEO you have to understand. You can’t just say, well this area of infrastructure, I have no idea how it works. Talk to Johnny. So I spend time learning, and that’s how I can give high quality feedback, and that’s how I can delegate it with confidence.

Ben: In some ways for the revenue scale and customer scale you’re operating at, I would reframe, wow, you’re 550 people. You’re only 550 people now. A decade ago you would’ve been way more.

Guillermo: I have a concrete example for that. v0 was amazing. I called it a startup within a startup because we said v0 will be entirely full stack Vercel.

Let’s imagine that another company is innovating and they only want to use Vercel to build the idea top to bottom. Front-end, back-end, database, AI model, procurement, everything is happening on Vercel. So that team is just tiny. The revenue figure per head is astonishing. It’s a proof point that if you build on the Vercel platform, you can be so lean.

A thing that I monitor obsessively is—

Ben: Oh wait, I’m sorry. Is everything that that team used a publicly available product from Vercel? So theoretically v0 could have been written by an outside team of just a few people.

Guillermo: Yes, like less than 10 people. It’s one of the fastest growing products in the industry right now.

So the thing that I monitor very, very, very neurotically is they’re not allowed to cheat. They’re not allowed to go to the infra team and say, oh I’m having a million requests per second right now. Can you provision some special thing for me? Zero. That gives me the confidence that our platform has no graduation risk. This is the scary ghost of every startup that tries to simplify things.

Ben: Yes. Oh, I’m so glad you went here.

Guillermo: I’m going to outgrow Vercel. For as long as I’m alive, I mean the details per my previous answer, I know that all of the escape hatches, all of the advanced capabilities, all of that is actually being provided by the platform itself. And that has allowed that team to be just tiny.

So I can project, I can forecast that there are going to be companies that are going to be born on this platform. I already have examples, I like to use Polymarket as an example of it. A tiny team that, during the election saw traffic that would scare infrastructure teams. It’s traffic that you have to have been around the Internet for decades to be able to live up to and to sustain.

I think teams are probably going to get smaller, by the way. This would be my prediction. If you have AI generating a ton of code, and the infrastructure is abstracted away, and there’s no graduation thing that you need to do when you get big, and if you can stay big with this level of simplicity, then the downward pressure will be on headcount. But not in a sense that people are going to retire, developers are going to retire into a beach. It’s that we’re going to see more products, more product creations that reach more people, built by fewer people.

Ben: How fast and at what scale?

Guillermo: I’ll give you a really good example. I think it was last week that Operator by OpenAI came out. Within 24 hours, Open Operator launched. It was built by a Vercel customer. They used v0 to create the interface. They used browser infrastructure that exists in the cloud to automate the Operator needs to use a web browser. They used models like DeepSeek and others to provision the agent.

The fact that you can go from, okay, so there’s this new idea. Agents can control a web browser and solve tasks for people. To put it out into the world, it can be 24 hours. That thing took over the Internet.

I tweeted about it, and I was getting emails from people in China saying, I’m losing my mind that this is the thing. How did this happen so fast? So it can be hours, it can be days, it can be weeks. Of course you have to sustain innovation. You can’t just launch something that goes viral and then you don’t have the thing to follow it with. But it’s amazing.

Marginal cost of software production goes to zero. What ends up happening is more and more people join the market, more people are going to be able to create, and hopefully Vercel is in the middle of every transaction. Meaning we’re facilitating both the agents and the developers and the new developers, the citizen developers, if you will, with everything they need in order to ship.

Ben: All right, well I can’t imagine a better place to leave it than that. Guillermo, thank you so much for joining us today.

Guillermo: That was super fun. Thank you for having me.

Ben: G, if you want to direct listeners to any calls to action, where can they check you out? Where can they play with v0?

Guillermo: If you want to directly get in contact with us, just find us on X, v0 or Vercel. Reach out to us, feedback, start building. Head to v0.dev, put in your idea, press submit, and off you go.

Ben: Awesome. Thanks so much.